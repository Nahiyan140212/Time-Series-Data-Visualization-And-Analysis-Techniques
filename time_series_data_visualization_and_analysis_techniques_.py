# -*- coding: utf-8 -*-
"""Time Series Data Visualization And Analysis Techniques .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FFsbkXLhQ2G7CdRk_9OlznytUz7ghyrU

#Time Series Data Visualization And Analysis Techniques
---
In this Notebook we are going to see different data visualization techniques for time series analysis. we will also discuss the different tasks we can consider for a better understanding, exploration and anlysis, while working with time series datasets.

the dataset: Average daily temprature of different cities around globe from 1995 to 2020 


#### Agenda:
    Task1: Importing our dataset 
    Task2: Data Preprocessing
    Task3: Analysing global temperature from 1995 to 2019
    Task4: Comparing yearly average temperature of different regions over time
    Task5: Monthly average temperature in Canada

----

Importing modules
"""

import pandas as pd 

import numpy as np 

import plotly.express as px 
import plotly.graph_objects as go
import matplotlib.pyplot as plt 

print("modules are imported!")

"""Let's load our dataset"""

data = pd.read_csv("/content/Weather_Data(1995-2020).csv", low_memory = False)
data.head()

"""The Dataset That we are going to work with is a ***Geo-Spatial Time-Series Dataset***

#### What is our dataset representing? 
**Geo-Spatial**: Data represents that **Something** has happend **somewhere**! <br>
**Time-Series**: Data represents that **Something** has happend **at a specific time**! <br>
<br>
**Geo-Spatial Time-Series Dataset**: Data represents that **Something** has happend **somewhere** **at a specific time**!


### Time Series tasks:
    1- Overall Trend analysis
    2- Key Moments
    3- Outliers

## Task 2: Preprocessing

#### Let's get only our needed columns
"""

needed_columns = ["Region","Country","City","Month","Day","Year","AvgTemperature"]
data = data[needed_columns]
data.head()

"""Let's convert fahrenheit to celsius"""

data["AvgTemperature"] = round((data["AvgTemperature"] - 32) * 5/9, 1)
data.head()

"""Let's find the outliers"""

data["AvgTemperature"].hist()

"""Removing the outliers """

data = data[data.AvgTemperature > -40]
data["AvgTemperature"].hist()

"""sorting values by Year, Month and Day Column to see the time range of our data"""

data.sort_values(["Year", "Month", "Day"])

"""we don't have 2020 data completely, so let's just remove them from our dataset """

data = data[data.Year < 2020]
data.sort_values(["Year", "Month", "Day"])

"""## Task 3: Global temperature from 1995 to 2019 
    - Aggregating our data based on the year 
    - plot our data in a line chart 
"""

data_agg = data[["Year", "AvgTemperature"]].groupby("Year").mean().reset_index()
data_agg.head()

"""Let's draw a line chart for this data"""

fig = px.line(data_agg, x = "Year", y = "AvgTemperature", title = "Global Average Temperature 1995 - 2019")
fig.update_xaxes(dtick = "Year")
fig.show()

"""### Time Series tasks:
    1- Overall Trend analysis
    2- Key Moments
    3- Outliers

### Overall Trend Analysis
Let's fit a linear line to our plot using numpy and Linear Regression
"""

coefs = np.polyfit(x = data_agg.Year, y = data_agg.AvgTemperature, deg = 1)

#y = mx + c

m = coefs[0]
c = coefs[1]

line = m*data_agg.Year + c
fig.add_trace(go.Scatter(x = data_agg.Year, y = line, name = "Trend Line"))
fig.show()

"""### Bar chart vs Line chart
Let's compare Bar chart and Line chart in terms of the tasks we can solve using each of them

Time Series tasks:

    1- Overall trend analysis
    2- Key Moments
    3- Outliers

Let's plot a bar chart for the same data
"""

px.bar(data_agg, x = "Year", y = "AvgTemperature", color = "AvgTemperature")

"""### Task 4: Let's compare yearly average temperature of different regions over time """

data_regions = data[["Region", "Year", "AvgTemperature"]].groupby(["Region", "Year"]).mean().reset_index()
data_regions.head()
fig1 = px.line(data_regions, x = "Year", y = "AvgTemperature", color = "Region")
fig1.update_xaxes(dtick = "Year")
fig1.show()



"""### Task 5: Monthly average temperature in Canada"""

data

"""Creating a date column with this format ***MONTH/YEAR***"""

data_canada = data[data.Country == 'Canada'][["Month", "Year", "AvgTemperature"]]
data_canada = data_canada.groupby(["Month", "Year"]).mean().reset_index()
data_canada

"""Let's plot a bar chart to analyse this data"""

data_canada.Month = data_canada.Month.astype(str)
data_canada.Year = data_canada.Year.astype(str)

data_canada["Date"] = data_canada.Month + "/" + data_canada.Year
data_canada.head()

fig = px.bar(data_canada, x = "Date", y = "AvgTemperature", color = "Month")
fig.show()

"""### Let's use a Box Plot for analyzing the same data"""

px.box(data_canada, x = "Month", y = "AvgTemperature", color = "Month")

